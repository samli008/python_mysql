# data_structure_tuple
t=(1,2,3)
print(t)
print(t[0])
print(t[1:3])

# data_structure_dict
d={} #empty dict

d={
  1:1,
  2:2,
  3:3
}

print(d[1])
d[1]='1111'
print(d)

# dict_method
d={
  'name': 'jood',
  'age': 9,
  'grade': 5
}

print(d.keys())
print(d.values())
print(d.get('name'))

del d['name']
print(d)

d.clear()
print(d)

# dict in python3 is OrderedDict

Python 2.7.5 (default, Oct 30 2018, 23:45:53) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> d = {'a':-1,'b':-1,'c':-1}
>>> d
{'a': -1, 'c': -1, 'b': -1}
>>> for k,v in d.items():
...   print(k,v)
... 
('a', -1)
('c', -1)
('b', -1)

Python 3.6.8 (default, Aug  7 2019, 17:28:10) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> d = {'a':-1,'b':-1,'c':-1}
>>> d
{'a': -1, 'b': -1, 'c': -1}
>>> for k,v in d.items():
...   print(k,v)
... 
a -1
b -1
c -1

# data_structure_set and De-duplication
>>> a=set('abbbcdd')
>>> a
set(['a', 'c', 'b', 'd'])
>>> a[0]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'set' object does not support indexing

>>> a=[1,2,2,3,3,5]
>>> b=set(a)
>>> print(a)
[1, 2, 2, 3, 3, 5]
>>> print(b)
set([1, 2, 3, 5])
>>> type(a)
<type 'list'>
>>> type(b)
<type 'set'>
